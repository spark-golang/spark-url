package utils

import (
	"reflect"
	"testing"
)

func TestReOrder(t *testing.T) {
	cases := []struct {
		src, dst, except []uint32
	}{
		{nil, nil, nil},
		{[]uint32{}, []uint32{1, 2, 3}, []uint32{}},
		{[]uint32{1, 2, 3}, []uint32{}, []uint32{1, 2, 3}},
		{[]uint32{4, 5, 6}, []uint32{1, 2, 3}, []uint32{4, 5, 6}},
		{[]uint32{4, 1, 6}, []uint32{1, 2, 3}, []uint32{1, 4, 6}},
		{[]uint32{3, 5, 1}, []uint32{1, 2, 3}, []uint32{1, 3, 5}},
		{[]uint32{3, 2, 1}, []uint32{1, 2, 3}, []uint32{1, 2, 3}},
		{[]uint32{2, 5, 3}, []uint32{1, 2, 3}, []uint32{2, 3, 5}},
	}

	for i, c := range cases {
		ReOrderSlice(c.src, c.dst)
		if !reflect.DeepEqual(c.src, c.except) {
			t.Fatalf("%d should be %v but is %v", i, c.except, c.src)
		}
	}
}

func TestReal(t *testing.T) {
	src := []uint32{1428, 841, 161, 1333, 554, 1289, 1092, 602, 1043, 601, 1350, 74, 539, 12, 586, 812, 1490, 816, 678, 1140, 1367, 1361, 1313, 1488, 1489, 1485, 1484, 1483, 1482, 1481, 1480, 1479, 1478, 1477, 1476, 1032, 1030, 1029, 1124, 1466, 1464, 806, 1301, 569, 1390, 901, 902, 1300, 531437, 1106, 1102, 1048, 1230, 1225, 1133, 1044, 1038, 800, 1311, 798, 1294, 838, 573, 811, 799, 784, 1099, 1096, 574, 575, 563, 787, 562, 1027, 1019, 1078, 1041, 1024, 1017, 565, 523, 516, 537, 582, 609, 786, 581, 560, 536, 527, 515, 479, 529, 538, 600, 532, 592, 611, 608, 518, 525, 584, 690, 579}
	dst := []uint32{601, 690, 161, 12, 13, 531437, 15, 513, 74, 525, 516, 523, 522, 527, 518, 581, 606, 1478, 1482, 1479, 1043, 515, 609, 1091, 479, 1078, 1489, 1490, 1485, 1483, 1484, 1488, 839, 1480, 1350, 805, 1124, 608, 1060, 1039, 1057, 1200, 531524, 1092, 1026, 1133, 1348, 1343, 531, 1342, 1281, 600, 1040, 514, 1027, 532, 1379, 534, 1284, 531534, 1151, 817, 1282, 1041, 1374, 836, 1175, 531527, 818, 536, 1327, 678, 1333, 1297, 602, 810, 1017, 1165, 529, 1088, 537, 531523, 1019, 567, 1160, 1361, 1038, 1158, 1355, 569, 785, 1447, 1436, 835, 1183, 565, 811, 670, 808, 1356}
	ReOrderSlice(src, dst)
	t.Logf("%v\n%v", src, dst)
}

func BenchmarkReOrder(b *testing.B) {
	b.StopTimer()
	src := []uint32{1428, 841, 161, 1333, 554, 1289, 1092, 602, 1043, 601, 1350, 74, 539, 12, 586, 812, 1490, 816, 678, 1140, 1367, 1361, 1313, 1488, 1489, 1485, 1484, 1483, 1482, 1481, 1480, 1479, 1478, 1477, 1476, 1032, 1030, 1029, 1124, 1466, 1464, 806, 1301, 569, 1390, 901, 902, 1300, 531437, 1106, 1102, 1048, 1230, 1225, 1133, 1044, 1038, 800, 1311, 798, 1294, 838, 573, 811, 799, 784, 1099, 1096, 574, 575, 563, 787, 562, 1027, 1019, 1078, 1041, 1024, 1017, 565, 523, 516, 537, 582, 609, 786, 581, 560, 536, 527, 515, 479, 529, 538, 600, 532, 592, 611, 608, 518, 525, 584, 690, 579}
	dst := []uint32{601, 690, 161, 12, 13, 531437, 15, 513, 74, 525, 516, 523, 522, 527, 518, 581, 606, 1478, 1482, 1479, 1043, 515, 609, 1091, 479, 1078, 1489, 1490, 1485, 1483, 1484, 1488, 839, 1480, 1350, 805, 1124, 608, 1060, 1039, 1057, 1200, 531524, 1092, 1026, 1133, 1348, 1343, 531, 1342, 1281, 600, 1040, 514, 1027, 532, 1379, 534, 1284, 531534, 1151, 817, 1282, 1041, 1374, 836, 1175, 531527, 818, 536, 1327, 678, 1333, 1297, 602, 810, 1017, 1165, 529, 1088, 537, 531523, 1019, 567, 1160, 1361, 1038, 1158, 1355, 569, 785, 1447, 1436, 835, 1183, 565, 811, 670, 808, 1356}
	srcTmp := append([]uint32{}, src...)
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		ReOrderSlice(src, dst)
		src = srcTmp
	}
}
